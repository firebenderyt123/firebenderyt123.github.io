{"version":3,"file":"static/js/507.79709b23.chunk.js","mappings":"kKAAO,IAAMA,EAAW,WAAH,IAAIC,EAAM,UAAD,6CAAC,IAAG,OAChCC,OAAOC,WAAaF,CAAoB,EAG7BG,EAAoB,WAAH,OAC5BF,OAAOC,WAAaD,OAAOG,YAAcH,OAAOC,WAAaD,OAAOG,WAAW,C,uKCHnC,4CAEjCC,EAAW,0CAKtB,aAAkC,IAAD,EAArBC,EAAK,uDAAG,GAAIC,EAAG,uDAAG,EAW3B,OAX4B,eAC7B,eAAQ,6FACR,0BACIF,EAAYG,UACd,EAAKC,UAAUF,GACf,EAAKG,IAAIC,MAAMC,KAA2B,GAApBP,EAAYQ,MAAa,KAC/C,EAAKH,IAAII,UAAUC,IAAI,UACvB,wBAAeT,GACfD,EAAYQ,QACZG,QAAQC,IAAIZ,EAAYQ,OACxBK,SAASC,KAAKC,YAAY,EAAKV,MAChC,CACH,CAAC,iBAjBqB,CAASW,KAkChC,WAfWf,GACR,IAAIgB,EAAOJ,SAASK,cAAc,KAClCD,EAAKE,UAAYlB,EACjBmB,KAAKf,IAAIgB,OAAOJ,EAClB,CAAC,aAGC,GAAyB,GAArBjB,EAAYQ,QAAeR,EAAYG,QAEzC,IADA,IAAMmB,EAAaT,SAASU,uBAAuB,SAC5CD,EAAWE,OAAS,GACzBF,EAAW,GAAGG,QAGpB,CAhCWzB,EAEJG,SAAU,EAFNH,EAGJQ,MAAQ,EAiCV,IAAMkB,EAAW,WAAgC,IAA/BxB,EAAG,uDAAG,EAC7B,KADyC,yDAC1B,CACb,IAAMyB,GAAQC,EAAAA,EAAAA,UAAQ,kBAAM,IAAIZ,IAAO,GAAE,KACzCa,EAAAA,EAAAA,YAAU,WACRF,EAAMvB,UAAUF,GAChByB,EAAMtB,IAAIC,MAAMC,KAAO,OACvBoB,EAAMtB,IAAIC,MAAMwB,MAAQ,EACxBjB,SAASC,KAAKC,YAAYY,EAAMtB,IAClC,KAEA0B,EAAAA,EAAAA,IAAS,WACPJ,EAAMK,QACNL,EAAMM,KACR,GACF,CACF,C,4OChDMC,EAAS,CACbC,KAAM,EACNC,SAAU,EACVC,QAAS,KAGEC,EAAW,SAAH,GAOd,IAAD,IANJC,MAAAA,OAAK,IAAC,WAAQ,MACdC,SAAAA,OAAQ,IAAC,WAAQ,MACjBC,kBAAAA,OAAiB,IAAC,KAAE,EAEA,GAFA,EACpBC,SAAkB,EAClBC,SAAoB,EACpBC,WAAAA,OAAS,IAAC,IAAC,EAGLC,GAAWjB,EAAAA,EAAAA,UACf,kBAAM,IAAIkB,EAAAA,kBAAwB,CAChCP,MAAOA,EACPQ,aAAa,EACbP,SAAUA,EACVC,kBAAmBA,EACnBO,YAAY,GACZ,GAAE,CAACT,EAAOC,EAAUC,IAGxB,GAA4BQ,EAAAA,EAAAA,WAAS,GAAM,eAApCC,EAAM,KAAEC,EAAS,KACxB,GAA8BF,EAAAA,EAAAA,WAAS,GAAM,eAAtCG,EAAO,KAAEC,EAAU,KAMpBpC,ECnCgB,SAAH,GAA8B,IAAzBqC,EAAQ,EAARA,SAAaC,GAAK,YACpCC,GAAa5B,EAAAA,EAAAA,UAAQ,kBAAM,IAAIkB,EAAAA,KAAa,GAAE,IAEpDU,EAAWC,OAAO,GAAI,IACtBD,EAAWE,cAAc,GAAI,GAAI,GAAI,EAAG,EAAG,GAC3CF,EAAWE,eAAe,GAAI,GAAI,GAAI,IAAK,GAAI,IAC/CF,EAAWE,eAAe,GAAI,IAAK,GAAI,GAAI,GAAI,IAC/CF,EAAWE,cAAc,GAAI,GAAI,GAAI,GAAI,GAAI,IAC7CF,EAAWE,cAAc,GAAI,GAAI,GAAI,EAAG,GAAI,GAC5CF,EAAWE,cAAc,GAAI,EAAG,GAAI,GAAI,GAAI,IAC5CF,EAAWC,OAAO,EAAG,GAErB,IAAME,EAAkB,CACtBC,MAAO,EACPC,cAAc,EACdC,cAAe,EACfC,MAAO,EACPC,UAAW,EACXC,eAAgB,GAGZC,GAAWtC,EAAAA,EAAAA,UACf,kBAAM,IAAIkB,EAAAA,gBAAsBU,EAAYG,EAAgB,GAAE,SAEhDQ,GAAZb,IACFA,GAAW1B,EAAAA,EAAAA,UAAQ,kBAAM,IAAIkB,EAAAA,iBAAyB,GAAE,CAACQ,KAC3D,IAAMc,GAAOxC,EAAAA,EAAAA,UAAQ,kBAAM,IAAIkB,EAAAA,KAAWoB,EAAUZ,EAAS,GAAE,CAACY,EAAUZ,IAEpEe,GAAMC,EAAAA,EAAAA,QAAOF,GAMnB,OAJAvC,EAAAA,EAAAA,YAAU,WACRqC,EAASK,QACX,KAGE,SAAC,EAAAC,SAAA,MAAa,QACZH,IAAKA,EACLH,SAAUA,EACVZ,SAAUA,GACNC,GAGV,CDPekB,CAAS,CACpBnB,SAAUT,EACVH,SAAU,CAAC,EAAG,EAAG,GACjBC,SAAU,CAAC,IAAK,EAAG,GACnB+B,QAAS,kBAAMrB,GAAW,SAACsB,GAAC,OAAMA,CAAC,GAAC,EACpCC,OAVgBC,EAAAA,EAAAA,WAAU,CAC1BD,MAAOxB,EAAWF,EAAS,IAAMN,EAAY,IAAMA,EAAcM,EAAS,IAAMN,EAAY,EAAIA,EAChGV,OAAQA,IAFF0C,QAkBR,OALA7C,EAAAA,EAAAA,IAAS,SAAC+C,EAAOC,GACfC,aAAY,kBAAM7B,GAAU,SAAC8B,GAAC,OAAMA,CAAC,GAAC,GAAE,GACxChE,EAAKoD,IAAIa,QAAQvC,SAASwC,GAAc,GAARJ,CAClC,IAEO9D,CACT,E,2CEjDamE,EAAe,SAAH,GAKlB,IAAD,IAJJ7C,MAAAA,OAAK,IAAC,WAAQ,MACdC,SAAAA,OAAQ,IAAC,WAAQ,MACjBC,kBAAAA,OAAiB,IAAC,IAAC,EAChBc,GAAK,YAGF8B,GAAOzD,EAAAA,EAAAA,UAAQ,kBAAM,IAAIkB,EAAAA,oBAA0B,EAAG,EAAE,GAAE,IAC1DwC,GAAM1D,EAAAA,EAAAA,UACV,kBAAM,IAAIkB,EAAAA,kBAAwB,CAChCP,MAAOA,EACPgD,WAAW,EACXC,iBAAkB,SAClBC,mBAAoB,EACpBC,KAAM5C,EAAAA,WACNN,SAAUA,EACVC,kBAAmBA,EACnBO,YAAY,GACZ,GAAE,CAACT,EAAOC,EAAUC,IAGlB4B,GAAMC,EAAAA,EAAAA,UAOZ,OALAvC,EAAAA,EAAAA,IAAS,SAAC+C,EAAOC,GACfV,EAAIa,QAAQvC,SAASgD,GAAc,IAARZ,EAC3BV,EAAIa,QAAQvC,SAASwC,GAAc,IAARJ,CAC7B,KAGE,+BACE,yBACEV,IAAKA,EACLH,SAAUmB,EACV/B,SAAUgC,EACVV,MAAO,CAAC,IAAK,IAAK,MACdrB,KAIZ,ECnCIqC,GAAW9F,EAAAA,EAAAA,KACX8F,EAAW,MACbA,GAAY,KAEd,IAAMC,EAAiBD,EANN,KAM4BA,EAN5B,KAQbE,EAAgB,EAChBF,EAAW,KACbE,EAAgB,EACPF,EAAW,OACpBE,EAAgB,GAGlB,IAAMC,EAAMjD,EAAAA,UAAAA,gBACNQ,EAAW,IAAIR,EAAAA,kBAAwB,CAC3CP,MAAO,SACPQ,aAAa,EACbP,SAAU,SACVC,kBAAmB,EACnBO,YAAY,IAGDgD,EAAY,SAAH,GAA0D,IAAD,IAAnDC,KAAAA,OAAI,MAAGH,EAAa,MAAEtF,MAAAA,OAAK,MAAGqF,EAAc,EAEhE3B,GAAWtC,EAAAA,EAAAA,UAAQ,kBAAM,IAAIkB,EAAAA,oBAA0BmD,EAAM,EAAE,GAAE,CAACA,IAElE5B,GAAMC,EAAAA,EAAAA,UAqBZ,OAnBAzC,EAAAA,EAAAA,YAAU,WAER,IADA,IAAMqE,EAAgB,IAAIpD,EAAAA,SACjBqD,EAAI,EAAGA,EAAI3F,EAAO2F,IACzBD,EAAcxD,SAAS0D,IACrBL,EAAIH,GACJG,EAAIH,GACJG,EAAIH,IAENM,EAAcvD,SAASyD,IAAIL,EAAI,KAAMA,EAAI,KAAMA,EAAI,MACnDG,EAAcG,eACdhC,EAAIa,QAAQoB,YAAYH,EAAGD,EAAcK,QAE3ClC,EAAIa,QAAQsB,eAAeC,aAAc,CAC3C,KAEA1E,EAAAA,EAAAA,IAAS,SAAC+C,EAAOC,GACfV,EAAIa,QAAQvC,SAASwC,GAAc,IAARJ,CAC7B,KAGE,0BACEV,IAAKA,EACLqC,KAAM,CAACxC,EAAUZ,EAAU9C,IAGjC,E,UCzDamG,EAAmB,WAC9B,OAAuBC,EAAAA,EAAAA,KAAfC,EAAM,EAANA,OAAQC,EAAE,EAAFA,GACVC,GAAWnF,EAAAA,EAAAA,UAAQ,kBAAM,IAAIoF,EAAAA,EAAcH,EAAQC,EAAGG,WAAW,GAAE,CAACJ,EAAQC,IAoBlF,OAnBAjF,EAAAA,EAAAA,YACE,WAKE,OAJAkF,EAASG,YAAc,IACvBH,EAASI,YAAc,IACvBJ,EAASK,WAAY,EACrBL,EAASM,YAAc,GAChB,WACLN,EAASO,SACX,CACF,GACA,CAACT,EAAQC,KAGX/E,EAAAA,EAAAA,IAAS,SAAC+C,GACRiC,EAASQ,eAAgB,EACzBR,EAASS,cAAgB,GACzBT,EAASU,QACX,IAEO,IACT,ECdM/H,GAAWgI,EAAAA,EAAAA,KAEX1G,EAAQ,WAAH,OAASU,EAAAA,EAAAA,GAAS,GAAG,EAAO,EA2DjCiG,EAAU,WAAH,OACX,SAAC,KAAc,WACb,SAAC,KAAK,CAACC,UAAW,OACH,EAGnB,EA/DgB,WAAH,OACX,UAAC,KAAM,CACLC,UAAU,MACVhB,OAAQ,CACNnE,SAAU,CAAC,EAAG,EAAG,KACjBoF,IAAK,GACLC,KAAM,EACNC,IAAK,KAEPlB,GAAI,CACFmB,gBAAiB,mBACjBC,OAAO,EACPC,WAAW,EACXC,SAAS,EACTxE,QAAOlE,GACP,WAEF,SAAC2I,EAAA,EAAO,CAACC,KAAG,KACZ,SAACC,EAAA,EAAW,CAACC,WAAS,KACtB,SAAC7B,EAAgB,KACjB,SAAC3F,EAAK,IACJtB,GAsBE,iCACE,SAAC4C,EAAQ,CACPE,SAAU,SACVC,kBAAmB,KAErB,SAAC2C,EAAY,CACX3C,kBAAmB,QA3BvB,iCACE,yBAAcF,MAAO,SAAUqF,UAAW,KAC1C,6BACEA,UAAW,EACXlF,SAAU,CAAC,EAAG,EAAG,GACjBH,MAAO,YAET,6BACEqF,UAAW,EACXlF,SAAU,CAAC,IAAM,EAAG,IACpBH,MAAO,WAET,6BACEqF,UAAW,EACXlF,SAAU,EAAE,KAAO,EAAG,IACtBH,MAAO,WAET,SAACD,EAAQ,KACT,SAAC8C,EAAY,KACb,SAACuC,EAAO,QAYd,SAAC3B,EAAS,MACH,E,wCC7DLyC,EAAa,EAAbA,EAAmB,KAAnBA,EAA6B,EA6InC,EA9HY,WACV,OAA8BxF,EAAAA,EAAAA,UAAS,IAAG,eAAnCyF,EAAO,KAAEC,EAAU,KAEpBC,GAAatE,EAAAA,EAAAA,UACbuE,GAAkBjH,EAAAA,EAAAA,UAAQ,kBAAM,IAAIkB,EAAAA,cAAoB,KAAO,IAAM,EAAG,IAAI,GAAE,IAC9EgG,GAAkBlH,EAAAA,EAAAA,UAAQ,kBAAM,IAAIkB,EAAAA,kBAAwB,CAACP,MAAO,UAAU,GAAE,IAEhFwG,EAAU,WAGd,OADqBL,EAAQlH,OAzBZ,IA2BfwH,EAAAA,EAAAA,KAAW,SAACC,GACVA,EAAIC,UAAUN,EAAW1D,QAAQxC,SAAUkG,EAAW1D,QAAQvC,SAAUiG,EAAW1D,QAAQN,MAC7F,KAGE,+BACA,kBAAOP,IAAKuE,EAAW,UACrB,iBACE1E,SAAU2E,EACVvF,SAAUwF,EACVnG,SAAU,CAAC,GAAI,EAAG,GAClBD,SAAU,CAAC,GAAI,KAAO,WAOvB,uBACT,EAEMyG,EAAY,WAChB,IAAMC,EAAeV,EAAQlH,OAE7B,GAAI4H,EAnDa,EAmDgB,CAC/B,IAAMC,EAAST,EAAW1D,QAAQxC,SAC5B4G,GAAgBC,EAAAA,EAAAA,eAjD1B,8BACE,SAACjH,EAAQ,CACPE,SAAU,SACVC,kBAAmB,EACnBG,UAAW,QAEb,SAACwC,EAAY,CACXR,MAAO,CAAC,KAAO,KAAO,WA4CpB,CACE4E,IAAKJ,EACL1G,SAAU,CACR2G,EAAO1D,EAAI8C,EACXY,EAAOlE,EAAIsD,EACXY,EAAOI,EAAIhB,KAIjBE,GAAW,SAACe,GAAI,wBACXA,GAAI,CACPJ,GAAa,GAEjB,CACF,EAEMK,EAAW,SAACC,GAChBT,GACF,EAEMU,EAAS,YACbC,EAAAA,EAAAA,GAAW,SAAUH,EACvB,EAUA,OACE,+BACE,UAAC,KAAM,CACL9B,UAAU,aACVf,GAAI,CACFmB,gBAAiB,mBACjBC,OAAO,EACPC,WAAW,EACXC,SAAS,EACTxE,OAAO,GACP,WAEF,SAAC2E,EAAA,EAAW,CAACC,WAAS,KACtB,UAACuB,EAAAA,GAAE,CACDC,eAAe,QACfC,aAvBa,SAACL,GACpBjB,EAAW,GACb,EAqBmC,WAE3B,SAACuB,EAAA,EAAW,IAEVxB,EAAQlH,OA1GC,GA2GP,SAACuH,EAAO,KACR,yBAEJ,yBAAcxG,MAAO,SAAUqF,UAAW,KAC1C,6BACEA,UAAW,EACXlF,SAAU,CAAC,EAAG,EAAG,GACjBH,MAAO,YAET,6BACEqF,UAAW,EACXlF,SAAU,CAAC,IAAM,EAAG,IACpBH,MAAO,WAET,6BACEqF,UAAW,EACXlF,SAAU,EAAE,KAAO,EAAG,IACtBH,MAAO,UAGPmG,EAAQlH,OA/HC,GAgIP,wCACOkH,IACL,SAACmB,EAAM,QAET,SAAC,KAAW,CAACF,SAjDL,SAACC,GACnBA,EAAMO,aAAaC,OAAOC,MAAMC,OAAOC,SAAS,GAAGF,MAAMG,SAAS9F,SACpE,EA+C+C,iBAC5BgE,YAOrB,EC7GA,EAlCY,WACV,OAAkCzF,EAAAA,EAAAA,UAAS,MAAK,eAAzCwH,EAAS,KAAEC,EAAY,KAC9B,GAAkCzH,EAAAA,EAAAA,WAAS,SAAC,EAAO,KAAI,eAAhD0H,EAAS,KAAEC,EAAY,MAE9B/I,EAAAA,EAAAA,YAAU,WACR6I,EAAa7J,SAASgK,eAAe,QAAQtJ,uBAAuB,aAAa,GACnF,IAEA,IAAMuJ,EAAU,SAAClB,GACfgB,GAAa,SAACG,EAAE,KAChBN,EAAUhK,UAAUC,IAAI,UAC1B,EAEMsK,EAAS,SAACpB,GACdgB,GAAa,SAAC,EAAO,KACrBH,EAAUhK,UAAUgB,OAAO,UAC7B,EAEA,OACE,iCACE,SAAC,KAAQ,CAACoG,UAAU,SAAQ,SAExB,SAACoD,GAAM,MAAe,eAAVA,GACV,gBAAKpD,UAAU,WAAU,SAAC,sBAChB,UAAVoD,GACE,+BAAE,gBAAKpD,UAAU,WAAWnD,QAASoG,EAAQ,SAAC,cAC9C,+BAAE,gBAAKjD,UAAU,UAAUnD,QAASsG,EAAO,SAAC,UAAa,IAGhEL,IAGP,C","sources":["DeviceChecker.js","Stats.js","scenes/scene2/HeartObj.js","models/Heart.js","scenes/scene2/WireFrameObj.js","scenes/scene2/Particles.js","scenes/scene2/CameraController.js","scenes/scene2/Scene3D.js","scenes/scene2/AR.js","scenes/scene2/App.js"],"sourcesContent":["export const isMobile = (width=768) => (\r\n  window.innerWidth < width ? true : false\r\n);\r\n\r\nexport const getMostSideLength = () => (\r\n  window.innerWidth > window.innerHeight ? window.innerWidth : window.innerHeight \r\n);","import Stats from 'stats.js';\r\nimport { useState, useEffect, useMemo } from \"react\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\n\r\nexport class CustomStats extends Stats {\r\n  \r\n  static isStats = true;\r\n  static count = 0;\r\n\r\n  constructor(title = \"\", num = 0) {\r\n    super();\r\n    this.#clearDom();\r\n    if (CustomStats.isStats) {\r\n      this.showPanel(num); // 0: fps, 1: ms, 2: mb, 3+: custom\r\n      this.dom.style.left = CustomStats.count * 82 + \"px\";\r\n      this.dom.classList.add(\"stats\");\r\n      this.#addTitle(title);\r\n      CustomStats.count++;\r\n      console.log(CustomStats.count);\r\n      document.body.appendChild(this.dom);\r\n    }\r\n  }\r\n\r\n  #addTitle(title) {\r\n    var elem = document.createElement(\"p\");\r\n    elem.innerHTML = title;\r\n    this.dom.append(elem);\r\n  }\r\n\r\n  #clearDom() {\r\n    if (CustomStats.count == 0 || !CustomStats.isStats) {\r\n      const statsElems = document.getElementsByClassName(\"stats\");\r\n      while (statsElems.length > 0) {\r\n        statsElems[0].remove();\r\n      }\r\n    }\r\n  }\r\n\r\n};\r\n\r\nexport const useStats = (num = 0, isEnabled = true) => {\r\n  if (isEnabled) {\r\n    const stats = useMemo(() => new Stats(), []);\r\n    useEffect(() => {\r\n      stats.showPanel(num);\r\n      stats.dom.style.left = \"auto\";\r\n      stats.dom.style.right = 0;\r\n      document.body.appendChild(stats.dom);\r\n    });\r\n\r\n    useFrame(() => {\r\n      stats.begin();\r\n      stats.end();\r\n    });\r\n  }\r\n};","import * as THREE from \"three\";\r\nimport { useState, useMemo } from 'react';\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport { useSpring } from \"@react-spring/three\";\r\n\r\nimport { useHeart } from \"../../models/Heart\";\r\n\r\nconst config = {\r\n  mass: 1,\r\n  friction: 1,\r\n  tension: 100\r\n};\r\n\r\nexport const HeartObj = ({\r\n  color=0xff3366,\r\n  emissive=0xff0000,\r\n  emissiveIntensity=20,\r\n  position=[0, 0, 0],\r\n  rotation=[110, 0, 0],\r\n  scaleKoef=1\r\n}) => {\r\n\r\n  const heartMat = useMemo(\r\n    () => new THREE.MeshPhongMaterial({\r\n      color: color,\r\n      flatShading: true,\r\n      emissive: emissive,\r\n      emissiveIntensity: emissiveIntensity,\r\n      toneMapped: false\r\n    }), [color, emissive, emissiveIntensity]\r\n  );\r\n\r\n  const [active, setActive] = useState(false);\r\n  const [clicked, setClicked] = useState(false);\r\n  const { scale } = useSpring({\r\n    scale: clicked ? (active ? 1.4 * scaleKoef : 1.3 * scaleKoef) : (active ? 1.1 * scaleKoef : 1 * scaleKoef),\r\n    config: config\r\n  });\r\n\r\n  const elem = useHeart({\r\n    material: heartMat,\r\n    position: [0, 0, 0],\r\n    rotation: [110, 0, 0],\r\n    onClick: () => setClicked((c) => !c),\r\n    scale: scale\r\n  });\r\n  \r\n  useFrame((state, delta) => {\r\n    setInterval(() => setActive((a) => !a), 2);\r\n    elem.ref.current.rotation.y += -delta * 1;\r\n  });\r\n\r\n  return elem;\r\n};","import * as THREE from \"three\";\r\nimport { useRef, useMemo, useEffect } from \"react\";\r\nimport { animated } from \"@react-spring/three\";\r\n\r\nexport const useHeart = ({material, ...props}) => {\r\n  const heartShape = useMemo(() => new THREE.Shape(), []);\r\n\r\n  heartShape.moveTo(25, 25);\r\n  heartShape.bezierCurveTo(25, 25, 20, 0, 0, 0);\r\n  heartShape.bezierCurveTo(-30, 0, -30, 35, -30, 35);\r\n  heartShape.bezierCurveTo(-30, 55, -10, 77, 25, 95);\r\n  heartShape.bezierCurveTo(60, 77, 80, 55, 80, 35);\r\n  heartShape.bezierCurveTo(80, 35, 80, 0, 50, 0);\r\n  heartShape.bezierCurveTo(35, 0, 25, 25, 25, 25);\r\n  heartShape.moveTo(0, 0);\r\n\r\n  const extrudeSettings = {\r\n    depth: 8,\r\n    bevelEnabled: true,\r\n    bevelSegments: 2,\r\n    steps: 2,\r\n    bevelSize: 1,\r\n    bevelThickness: 1\r\n  };\r\n\r\n  const geometry = useMemo(\r\n    () => new THREE.ExtrudeGeometry(heartShape, extrudeSettings), []\r\n  );\r\n  if (material == undefined)\r\n    material = useMemo(() => new THREE.MeshPhongMaterial(), [material]);\r\n  const mesh = useMemo(() => new THREE.Mesh(geometry, material), [geometry, material]);\r\n\r\n  const ref = useRef(mesh);\r\n\r\n  useEffect(() => {\r\n    geometry.center();\r\n  });\r\n\r\n  return (\r\n    <animated.mesh\r\n      ref={ref}\r\n      geometry={geometry}\r\n      material={material}\r\n      {...props}\r\n    />\r\n  );\r\n};","import * as THREE from \"three\";\r\nimport { useRef, useMemo } from \"react\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\n\r\nexport const WireFrameObj = ({\r\n  color=0xffffff,\r\n  emissive=0xffffff,\r\n  emissiveIntensity=2,\r\n  ...props\r\n}) => {\r\n\r\n  const geom = useMemo(() => new THREE.IcosahedronGeometry(1, 1), []);\r\n  const mat = useMemo(\r\n    () => new THREE.MeshPhongMaterial({\r\n      color: color,\r\n      wireframe: true,\r\n      wireframeLinecap: \"square\",\r\n      wireframeLinewidth: 2,\r\n      side: THREE.DoubleSide,\r\n      emissive: emissive,\r\n      emissiveIntensity: emissiveIntensity,\r\n      toneMapped: false\r\n    }), [color, emissive, emissiveIntensity]\r\n  );\r\n\r\n  const ref = useRef();\r\n\r\n  useFrame((state, delta) => {\r\n    ref.current.rotation.x += -delta * 0.1;\r\n    ref.current.rotation.y += -delta * 0.2;\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <mesh\r\n        ref={ref}\r\n        geometry={geom}\r\n        material={mat}\r\n        scale={[150, 150, 150]}\r\n        {...props}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import * as THREE from \"three\";\r\nimport { useRef, useEffect, useMemo } from \"react\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\n\r\nimport { getMostSideLength } from \"../../DeviceChecker\";\r\n\r\nconst maxCount = 2560;\r\n\r\nvar mostSide = getMostSideLength();\r\nif (mostSide < 768) {\r\n  mostSide *= 1.5;\r\n}\r\nconst particlesCount = mostSide < maxCount ? mostSide : maxCount;\r\n\r\nvar particlesSize = 2;\r\nif (mostSide > 1920) {\r\n  particlesSize = 4;\r\n} else if (mostSide > 1440) {\r\n  particlesSize = 3;\r\n}\r\n\r\nconst rfs = THREE.MathUtils.randFloatSpread;\r\nconst material = new THREE.MeshPhongMaterial({\r\n  color: 0xffffff,\r\n  flatShading: true,\r\n  emissive: 0x999999,\r\n  emissiveIntensity: 2,\r\n  toneMapped: false\r\n});\r\n\r\nexport const Particles = ({ size = particlesSize, count = particlesCount }) => {\r\n\r\n  const geometry = useMemo(() => new THREE.TetrahedronGeometry(size, 0), [size]);\r\n\r\n  const ref = useRef();\r\n\r\n  useEffect(() => {\r\n    const tempParticles = new THREE.Object3D();\r\n    for (let i = 0; i < count; i++) {\r\n      tempParticles.position.set(\r\n        rfs(mostSide),\r\n        rfs(mostSide),\r\n        rfs(mostSide)\r\n      );\r\n      tempParticles.rotation.set(rfs(180), rfs(180), rfs(180));\r\n      tempParticles.updateMatrix();\r\n      ref.current.setMatrixAt(i, tempParticles.matrix);\r\n    }\r\n    ref.current.instanceMatrix.needsUpdate = true;\r\n  });\r\n\r\n  useFrame((state, delta) => {\r\n    ref.current.rotation.y += -delta * 0.4;\r\n  });\r\n\r\n  return (\r\n    <instancedMesh\r\n      ref={ref}\r\n      args={[geometry, material, count]}\r\n    />\r\n  );\r\n};","import { useMemo, useEffect } from 'react';\r\nimport { useFrame, useThree } from \"@react-three/fiber\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nexport const CameraController = () => {\r\n  const { camera, gl } = useThree();\r\n  const controls = useMemo(() => new OrbitControls(camera, gl.domElement), [camera, gl]);\r\n  useEffect(\r\n    () => {\r\n      controls.minDistance = 200;\r\n      controls.maxDistance = 600;\r\n      controls.enablePan = false;\r\n      controls.rotateSpeed = .5;\r\n      return () => {\r\n        controls.dispose();\r\n      };\r\n    },\r\n    [camera, gl]\r\n  );\r\n\r\n  useFrame((state) => {\r\n    controls.enableDamping = true;\r\n    controls.dampingFactor = .1;\r\n    controls.update();\r\n  });\r\n\r\n  return null;\r\n};","import { Canvas } from \"@react-three/fiber\";\r\nimport { Preload, AdaptiveDpr } from '@react-three/drei';\r\nimport { EffectComposer, Bloom } from '@react-three/postprocessing';\r\n\r\nimport { isMobile as isMob } from \"../../DeviceChecker\";\r\nimport { useStats } from '../../Stats';\r\nimport { HeartObj } from \"./HeartObj\";\r\nimport { IcosahedronObj } from \"./IcosahedronObj\";\r\nimport { WireFrameObj } from \"./WireFrameObj\";\r\nimport { Particles } from \"./Particles\";\r\n\r\nimport { CameraController } from \"./CameraController\";\r\n\r\nconst isMobile = isMob();\r\n\r\nconst Stats = () => useStats(0, false);\r\n\r\nconst Scene3D = () => (\r\n  <Canvas\r\n    className=\"app\"\r\n    camera={{\r\n      position: [0, 0, 400],\r\n      fov: 75,\r\n      near: 1,\r\n      far: 1000\r\n    }}\r\n    gl={{\r\n      powerPreference: \"high-performance\",\r\n      alpha: true,\r\n      antialias: true,\r\n      stencil: false,\r\n      depth: isMobile ? true : false\r\n    }}\r\n  >\r\n    <Preload all />\r\n    <AdaptiveDpr pixelated />\r\n    <CameraController />\r\n    <Stats />\r\n    {!isMobile\r\n      ? <>\r\n          <ambientLight color={0xff3366} intensity={2} />\r\n          <directionalLight\r\n            intensity={2}\r\n            position={[1, 0, 0]}\r\n            color={0xffffff}\r\n          />\r\n          <directionalLight\r\n            intensity={2}\r\n            position={[0.75, 1, 0.5]}\r\n            color={0x11E8BB}\r\n          />\r\n          <directionalLight\r\n            intensity={2}\r\n            position={[-0.75, -1, 0.5]}\r\n            color={0x8200C9}\r\n          />\r\n          <HeartObj />\r\n          <WireFrameObj />\r\n          <Effects />\r\n        </>\r\n      : <>\r\n          <HeartObj\r\n            emissive={0xff3366}\r\n            emissiveIntensity={1}\r\n          />\r\n          <WireFrameObj\r\n            emissiveIntensity={1}\r\n          />\r\n        </>\r\n    }\r\n    <Particles />\r\n  </Canvas>\r\n);\r\n\r\nconst Effects = () => (\r\n  <EffectComposer>\r\n    <Bloom intensity={0.05} />\r\n  </EffectComposer>\r\n);\r\n\r\nexport default Scene3D;","import * as THREE from \"three\";\r\nimport { useState, useMemo, useRef, cloneElement } from 'react';\r\nimport { AdaptiveDpr } from '@react-three/drei';\r\nimport { XR, ARButton, Controllers, useHitTest, useXREvent, Interactive } from '@react-three/xr';\r\nimport { Canvas } from '@react-three/fiber';\r\n\r\nimport { HeartObj } from \"./HeartObj\";\r\nimport { WireFrameObj } from \"./WireFrameObj\";\r\n\r\nconst limitObjects = 1;\r\nconst offset = {x: 0, y: 0.175, z: 0};\r\n\r\nconst Obj = () => (\r\n  <group>\r\n    <HeartObj\r\n      emissive={0xff3366}\r\n      emissiveIntensity={1}\r\n      scaleKoef={0.0005}\r\n    />\r\n    <WireFrameObj\r\n      scale={[0.075, 0.075, 0.075]}\r\n    />\r\n  </group>\r\n);\r\n\r\nconst App = () => {\r\n  const [objects, setObjects] = useState([]);\r\n\r\n  const hitTestRef = useRef();\r\n  const geometryHitTest = useMemo(() => new THREE.TorusGeometry(0.062, 0.01, 2, 100), []);\r\n  const materialHitTest = useMemo(() => new THREE.MeshBasicMaterial({color: 0xFF88DD}), []);\r\n\r\n  const HitTest = () => {\r\n\r\n    const objectsCount = objects.length;\r\n    if (objectsCount < limitObjects) {\r\n      useHitTest((hit) => {\r\n        hit.decompose(hitTestRef.current.position, hitTestRef.current.rotation, hitTestRef.current.scale);\r\n      });\r\n\r\n      return (\r\n        <>\r\n        <group ref={hitTestRef}>\r\n          <mesh\r\n            geometry={geometryHitTest}\r\n            material={materialHitTest}\r\n            rotation={[90, 0, 0]}\r\n            position={[0, -0.126, 0]}\r\n          />\r\n        </group>\r\n        </>\r\n      );\r\n    }\r\n\r\n    return <></>;\r\n  };\r\n\r\n  const addObject = () => {\r\n    const objectsCount = objects.length;\r\n\r\n    if (objectsCount < limitObjects) {\r\n      const hitPos = hitTestRef.current.position;\r\n      const clonedElement = cloneElement(\r\n        Obj(),\r\n        {\r\n          key: objectsCount,\r\n          position: [\r\n            hitPos.x + offset.x,\r\n            hitPos.y + offset.y,\r\n            hitPos.z + offset.z\r\n          ]\r\n        }\r\n      );\r\n      setObjects((prev) => [\r\n        ...prev,\r\n        clonedElement\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const onSelect = (event) => {\r\n    addObject();\r\n  };\r\n\r\n  const Events = () => {\r\n    useXREvent('select', onSelect);\r\n  };\r\n\r\n  const onSessionEnd = (event) => {\r\n    setObjects([]);\r\n  };\r\n\r\n  const objOnSelect = (event) => {\r\n    event.intersection.object.__r3f.parent.children[0].__r3f.handlers.onClick();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Canvas\r\n        className=\"AR-preview\"\r\n        gl={{\r\n          powerPreference: \"high-performance\",\r\n          alpha: true,\r\n          antialias: true,\r\n          stencil: false,\r\n          depth: true\r\n        }}\r\n      >\r\n        <AdaptiveDpr pixelated />\r\n        <XR\r\n          referenceSpace=\"local\"\r\n          onSessionEnd={onSessionEnd}\r\n        >\r\n          <Controllers />\r\n          {\r\n            objects.length < limitObjects\r\n            ? <HitTest />\r\n            : <></>\r\n          }\r\n          <ambientLight color={0xff3366} intensity={2} />\r\n          <directionalLight\r\n            intensity={2}\r\n            position={[1, 0, 0]}\r\n            color={0xffffff}\r\n          />\r\n          <directionalLight\r\n            intensity={2}\r\n            position={[0.75, 1, 0.5]}\r\n            color={0x11E8BB}\r\n          />\r\n          <directionalLight\r\n            intensity={2}\r\n            position={[-0.75, -1, 0.5]}\r\n            color={0x8200C9}\r\n          />\r\n          {\r\n            objects.length < limitObjects\r\n            ? <>\r\n                {[...objects]}\r\n                <Events />\r\n              </>\r\n            : <Interactive onSelect={objOnSelect}>\r\n                {[...objects]}\r\n              </Interactive>\r\n          }\r\n        </XR>\r\n      </Canvas>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;","import { useState, useEffect } from \"react\";\r\nimport { ARButton } from '@react-three/xr';\r\n\r\nimport Scene3D from './Scene3D';\r\nimport AR from './AR';\r\n\r\nconst App = () => {\r\n  const [container, setContainer] = useState(null);\r\n  const [loadScene, setLoadScene] = useState(<Scene3D />);\r\n\r\n  useEffect(() => {\r\n    setContainer(document.getElementById(\"root\").getElementsByClassName(\"container\")[0]);\r\n  });\r\n\r\n  const XRStart = (event) => {\r\n    setLoadScene(<AR />);\r\n    container.classList.add(\"XR-mode\");\r\n  };\r\n\r\n  const XRStop = (event) => {\r\n    setLoadScene(<Scene3D />);\r\n    container.classList.remove(\"XR-mode\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ARButton className=\"AR-btn\">\r\n        {\r\n          (status) => status == \"unsupported\"\r\n          ? <div className=\"XR-start\">AR is unsupported</div>\r\n          : status == \"exited\"\r\n            ? <><div className=\"XR-start\" onClick={XRStart}>Try AR</div></>\r\n            : <><div className=\"XR-stop\" onClick={XRStop}>Exit</div></>\r\n        }\r\n      </ARButton>\r\n      {loadScene}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;"],"names":["isMobile","width","window","innerWidth","getMostSideLength","innerHeight","CustomStats","title","num","isStats","showPanel","dom","style","left","count","classList","add","console","log","document","body","appendChild","Stats","elem","createElement","innerHTML","this","append","statsElems","getElementsByClassName","length","remove","useStats","stats","useMemo","useEffect","right","useFrame","begin","end","config","mass","friction","tension","HeartObj","color","emissive","emissiveIntensity","position","rotation","scaleKoef","heartMat","THREE","flatShading","toneMapped","useState","active","setActive","clicked","setClicked","material","props","heartShape","moveTo","bezierCurveTo","extrudeSettings","depth","bevelEnabled","bevelSegments","steps","bevelSize","bevelThickness","geometry","undefined","mesh","ref","useRef","center","animated","useHeart","onClick","c","scale","useSpring","state","delta","setInterval","a","current","y","WireFrameObj","geom","mat","wireframe","wireframeLinecap","wireframeLinewidth","side","x","mostSide","particlesCount","particlesSize","rfs","Particles","size","tempParticles","i","set","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate","args","CameraController","useThree","camera","gl","controls","OrbitControls","domElement","minDistance","maxDistance","enablePan","rotateSpeed","dispose","enableDamping","dampingFactor","update","isMob","Effects","intensity","className","fov","near","far","powerPreference","alpha","antialias","stencil","Preload","all","AdaptiveDpr","pixelated","offset","objects","setObjects","hitTestRef","geometryHitTest","materialHitTest","HitTest","useHitTest","hit","decompose","addObject","objectsCount","hitPos","clonedElement","cloneElement","key","z","prev","onSelect","event","Events","useXREvent","XR","referenceSpace","onSessionEnd","Controllers","intersection","object","__r3f","parent","children","handlers","container","setContainer","loadScene","setLoadScene","getElementById","XRStart","AR","XRStop","status"],"sourceRoot":""}