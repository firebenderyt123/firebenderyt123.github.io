{"version":3,"file":"static/js/731.13ec3853.chunk.js","mappings":"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","sources":["DeviceChecker.js","Stats.js","scenes/scene1/ClumpObj.js","scenes/scene1/Pointer.js","scenes/scene1/CameraController.js","scenes/scene1/App.js"],"sourcesContent":["export const isMobile = (width=768) => (\r\n  window.innerWidth < width ? true : false\r\n);\r\n\r\nexport const getMostSideLength = () => (\r\n  window.innerWidth > window.innerHeight ? window.innerWidth : window.innerHeight \r\n);","import Stats from 'stats.js';\r\nimport { useState, useEffect, useMemo } from \"react\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\n\r\nexport class CustomStats extends Stats {\r\n  \r\n  static isStats = true;\r\n  static count = 0;\r\n\r\n  constructor(title = \"\", num = 0) {\r\n    super();\r\n    this.#clearDom();\r\n    if (CustomStats.isStats) {\r\n      this.showPanel(num); // 0: fps, 1: ms, 2: mb, 3+: custom\r\n      this.dom.style.left = CustomStats.count * 82 + \"px\";\r\n      this.dom.classList.add(\"stats\");\r\n      this.#addTitle(title);\r\n      CustomStats.count++;\r\n      console.log(CustomStats.count);\r\n      document.body.appendChild(this.dom);\r\n    }\r\n  }\r\n\r\n  #addTitle(title) {\r\n    var elem = document.createElement(\"p\");\r\n    elem.innerHTML = title;\r\n    this.dom.append(elem);\r\n  }\r\n\r\n  #clearDom() {\r\n    if (CustomStats.count == 0 || !CustomStats.isStats) {\r\n      const statsElems = document.getElementsByClassName(\"stats\");\r\n      while (statsElems.length > 0) {\r\n        statsElems[0].remove();\r\n      }\r\n    }\r\n  }\r\n\r\n};\r\n\r\nexport const useStats = (num = 0, isEnabled = true) => {\r\n  if (isEnabled) {\r\n    const stats = useMemo(() => new Stats(), []);\r\n    useEffect(() => {\r\n      stats.showPanel(num);\r\n      stats.dom.style.left = \"auto\";\r\n      stats.dom.style.right = 0;\r\n      document.body.appendChild(stats.dom);\r\n    });\r\n\r\n    useFrame(() => {\r\n      stats.begin();\r\n      stats.end();\r\n    });\r\n  }\r\n};","import * as THREE from \"three\";\r\nimport { useMemo, useRef, useEffect } from \"react\";\r\nimport { useSphere } from \"@react-three/cannon\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport { useTexture } from \"@react-three/drei\";\r\n\r\nconst rfs = THREE.MathUtils.randFloatSpread;\r\n\r\nexport const ClumpObj = ({ mat = new THREE.Matrix4(), vec = new THREE.Vector3(), mass = 1, count = 1 }) => {\r\n\r\n  const sphereGeometry = useMemo(() => new THREE.SphereGeometry(1, 32, 32), []);\r\n  const baubleMaterial = useMemo(() => new THREE.MeshStandardMaterial({\r\n    color: 0xff0033,\r\n    roughness: 0,\r\n    envMapIntensity: 0.2,\r\n    emissive: \"#370037\"\r\n  }), []);\r\n  const texture = useTexture(\"/cross.jpg\");\r\n  \r\n  const [ref, api] = useSphere(() => ({ args: [1], mass: mass, angularDamping: 0.1, linearDamping: 0.65, position: [rfs(20), rfs(20), rfs(20)] }), useRef());\r\n  \r\n  useMemo(() => {\r\n    for (let i = 0; i < count; i++) {\r\n      api.at(i).mass.set(mass);\r\n    }\r\n  }, [mass]);\r\n\r\n  useFrame((state) => {\r\n    for (let i = 0; i < count; i++) {\r\n      ref.current.getMatrixAt(i, mat);\r\n      api.at(i).applyForce(vec.setFromMatrixPosition(mat).normalize().multiplyScalar(-50).toArray(), [0, 0, 0]);\r\n    }\r\n  });\r\n  return (\r\n    <instancedMesh\r\n      ref={ref}\r\n      castShadow\r\n      receiveShadow\r\n      args={[null, null, count]}\r\n      geometry={sphereGeometry}\r\n      material={baubleMaterial}\r\n      material-map={texture}\r\n    />\r\n  );\r\n};","import * as THREE from \"three\";\r\n\r\nimport { useState, createRef } from \"react\";\r\nimport { useFrame, useThree } from \"@react-three/fiber\";\r\nimport { useSphere } from \"@react-three/cannon\";\r\nimport { useTexture } from \"@react-three/drei\";\r\n\r\n// const mat = new THREE.MeshStandardMaterial({\r\n//   color: \"red\",\r\n//   roughness: 0,\r\n//   envMapIntensity: 0.2,\r\n//   emissive: \"#370037\",\r\n//   // color: 0xffffff,\r\n//   transparent: true,\r\n//   side: THREE.DoubleSide,\r\n//   opacity: 0.05\r\n// });\r\n\r\nexport const Pointer = ({radius = 3}) => {\r\n  // const geo = new THREE.SphereGeometry(radius, 32, 32);\r\n  // const texture = useTexture(\"/cross.jpg\");\r\n  const viewport = useThree((state) => state.viewport);\r\n  const [ref, api] = useSphere(() => ({ type: \"Kinematic\", args: [radius], position: [0, 0, 0] }));\r\n  \r\n  return useFrame((state) => {\r\n    api.position.set(\r\n      (state.mouse.x * viewport.width) / 2,\r\n      (state.mouse.y * viewport.height) / 2,\r\n      0\r\n    );\r\n  });\r\n\r\n  // return (\r\n  //   <mesh\r\n  //     ref={ref}\r\n  //     geometry={geo}\r\n  //     material={mat}\r\n  //     material-map={texture}\r\n  //   />\r\n  // );\r\n};","import { useEffect } from 'react';\r\nimport { useThree } from \"@react-three/fiber\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nexport const CameraController = () => {\r\n  const { camera, gl } = useThree();\r\n  useEffect(\r\n    () => {\r\n      const controls = new OrbitControls(camera, gl.domElement);\r\n      controls.enablePan = false;\r\n      controls.enableRotate = false;\r\n      controls.enableZoom = false;\r\n      return () => {\r\n        controls.dispose();\r\n      };\r\n    },\r\n    [camera, gl]\r\n  );\r\n\r\n  return null;\r\n};","import { ClumpObj } from \"./ClumpObj\";\r\nimport { Pointer } from \"./Pointer\";\r\nimport { CameraController } from \"./CameraController\";\r\nimport { isMobile as isMob } from \"../../DeviceChecker\";\r\nimport { useStats } from \"../../Stats\";\r\n\r\nimport * as THREE from \"three\";\r\nimport { useState } from \"react\";\r\nimport { Canvas } from \"@react-three/fiber\";\r\nimport { Physics } from \"@react-three/cannon\";\r\nimport { Preload, PerformanceMonitor, AdaptiveDpr, Environment } from \"@react-three/drei\";\r\n\r\nconst isMobile = isMob();\r\n\r\nconst Stats = () => useStats(0, false);\r\n\r\nconst App = () => {\r\n  const [dpr, setDpr] = useState(1.5);\r\n\r\n  return (\r\n    <Canvas\r\n      shadows\r\n      className=\"app\"\r\n      // frameloop=\"demand\"\r\n      dpr={dpr}\r\n      camera={{\r\n        position: [0, 0, 20],\r\n        fov: 35,\r\n        near: 1,\r\n        far: 40\r\n      }}\r\n      gl={{\r\n        powerPreference: \"high-performance\",\r\n        alpha: true,\r\n        antialias: true,\r\n        stencil: false,\r\n        depth: true\r\n      }}\r\n    >\r\n      <Preload all />\r\n      <AdaptiveDpr pixelated />\r\n      <PerformanceMonitor onIncline={() => setDpr(2)} onDecline={() => setDpr(1)}>\r\n        <CameraController />\r\n        <ambientLight intensity={0.25} />\r\n        <spotLight\r\n          intensity={1}\r\n          angle={0.2}\r\n          penumbra={1}\r\n          position={[30, 30, 30]}\r\n          castShadow\r\n          shadow-mapSize={[512, 512]}\r\n        />\r\n        <directionalLight\r\n          intensity={5}\r\n          position={[-10, -10, -10]}\r\n          color=\"purple\"\r\n        />\r\n        <Physics\r\n          gravity={[0, 2, 0]}\r\n          iterations={10}\r\n        >\r\n          <Pointer radius={3} />\r\n          <ClumpObj count={isMobile ? 4 : 20} mass={1} />\r\n        </Physics>\r\n        <Environment files=\"/adamsbridge.hdr\" />\r\n        <Stats />\r\n      </PerformanceMonitor>\r\n    </Canvas>\r\n  );\r\n};\r\n\r\nexport default App;"],"names":["isMobile","width","window","innerWidth","getMostSideLength","innerHeight","CustomStats","title","num","isStats","showPanel","dom","style","left","count","classList","add","console","log","document","body","appendChild","Stats","elem","createElement","innerHTML","this","append","statsElems","getElementsByClassName","length","remove","useStats","stats","useMemo","useEffect","right","useFrame","begin","end","rfs","THREE","ClumpObj","mat","vec","mass","sphereGeometry","baubleMaterial","color","roughness","envMapIntensity","emissive","texture","useTexture","useSphere","args","angularDamping","linearDamping","position","useRef","ref","api","i","at","set","state","current","getMatrixAt","applyForce","setFromMatrixPosition","normalize","multiplyScalar","toArray","castShadow","receiveShadow","geometry","material","Pointer","radius","viewport","useThree","type","mouse","x","y","height","CameraController","camera","gl","controls","OrbitControls","domElement","enablePan","enableRotate","enableZoom","dispose","isMob","useState","dpr","setDpr","shadows","className","fov","near","far","powerPreference","alpha","antialias","stencil","depth","Preload","all","AdaptiveDpr","pixelated","PerformanceMonitor","onIncline","onDecline","intensity","angle","penumbra","gravity","iterations","Environment","files"],"sourceRoot":""}